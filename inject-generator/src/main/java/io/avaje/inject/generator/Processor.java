package io.avaje.inject.generator;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;
import javax.tools.StandardLocation;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.*;
import java.util.stream.Collectors;

public final class Processor extends AbstractProcessor {

  private ProcessingContext context;
  private Elements elementUtils;
  private ScopeInfo defaultScope;
  private AllScopes allScopes;
  private boolean readModuleInfo;
  private final Set<String> pluginFileProvided = new HashSet<>();
  private final Set<String> moduleFileProvided = new HashSet<>();

  @Override
  public SourceVersion getSupportedSourceVersion() {
    return SourceVersion.latest();
  }

  @Override
  public synchronized void init(ProcessingEnvironment processingEnv) {
    super.init(processingEnv);
    loadProvidedFiles(processingEnv.getFiler());
    this.context = new ProcessingContext(processingEnv, moduleFileProvided);
    this.elementUtils = processingEnv.getElementUtils();
    this.allScopes = new AllScopes(context);
    this.defaultScope = allScopes.defaultScope();
    registerPluginProvidedTypes();
  }

  /**
   * Loads provider files generated by avaje-inject-maven-plugin
   */
  void loadProvidedFiles(Filer filer) {
    pluginFileProvided.addAll(targetProvidesLines(filer, "target/avaje-plugin-provides.txt"));
    moduleFileProvided.addAll(targetProvidesLines(filer, "target/avaje-module-provides.txt"));
  }

  private static List<String> targetProvidesLines(Filer filer, String relativeName) {
    try {
      final String resource = targetProvides(filer, relativeName);
      try (var inputStream = new URL(resource).openStream();
           var reader = new BufferedReader(new InputStreamReader(inputStream))) {
        return reader.lines().collect(Collectors.toList());
      }
    } catch (final IOException e) {
      return Collections.emptyList();
    }
  }

  private static String targetProvides(Filer filer, String relativeName) throws IOException {
    return filer
      .getResource(StandardLocation.CLASS_OUTPUT, "", relativeName)
      .toUri()
      .toString()
      .replace("/target/classes", "");
  }

  /**
   * Register types provided by the plugin so no compiler error when we have a dependency
   * on these types and the only thing providing them is the plugin.
   */
  private void registerPluginProvidedTypes() {
    defaultScope.pluginProvided(pluginFileProvided);
    if (DetectClassPath.hasClassPathAccess()) {
      defaultScope.pluginProvided(ExternalPluginLoad.load());
    }
  }

  @Override
  public Set<String> getSupportedAnnotationTypes() {
    Set<String> annotations = new LinkedHashSet<>();
    annotations.add(Constants.INJECTMODULE);
    annotations.add(Constants.FACTORY);
    annotations.add(Constants.SINGLETON);
    annotations.add(Constants.COMPONENT);
    annotations.add(Constants.PROTOTYPE);
    annotations.add(Constants.SCOPE);
    annotations.add(Constants.TESTSCOPE);
    annotations.add(Constants.CONTROLLER);
    return annotations;
  }

  @Override
  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
    readModule(roundEnv);
    readScopes(roundEnv.getElementsAnnotatedWith(context.typeScope()));
    readChangedBeans(roundEnv.getElementsAnnotatedWith(context.typeFactory()), true);
    if (defaultScope.includeSingleton()) {
      readChangedBeans(roundEnv.getElementsAnnotatedWith(context.typeSingleton()), false);
    }
    readChangedBeans(roundEnv.getElementsAnnotatedWith(context.typeComponent()), false);
    readChangedBeans(roundEnv.getElementsAnnotatedWith(context.typePrototype()), false);
    TypeElement typeElement = elementUtils.getTypeElement(Constants.CONTROLLER);
    if (typeElement != null) {
      readChangedBeans(roundEnv.getElementsAnnotatedWith(typeElement), false);
    }
    readChangedBeans(roundEnv.getElementsAnnotatedWith(context.typeProxy()), false);
    allScopes.readBeans(roundEnv);
    defaultScope.write(roundEnv.processingOver());
    allScopes.write(roundEnv.processingOver());
    return false;
  }

  private void readScopes(Set<? extends Element> scopes) {
    for (Element element : scopes) {
      if (element.getKind() == ElementKind.ANNOTATION_TYPE) {
        if (element instanceof TypeElement) {
          TypeElement type = (TypeElement) element;
          allScopes.addScopeAnnotation(type);
        }
      }
    }
    addTestScope();
  }

  /**
   * Add built-in test scope for <code>@TestScope</code> if available.
   */
  private void addTestScope() {
    TypeElement testScopeType = elementUtils.getTypeElement(Constants.TESTSCOPE);
    if (testScopeType != null) {
      allScopes.addScopeAnnotation(testScopeType);
    }
  }

  /**
   * Read the beans that have changed.
   */
  private void readChangedBeans(Set<? extends Element> beans, boolean factory) {
    for (Element element : beans) {
      // ignore methods (e.g. factory methods with @Prototype on them)
      if (element instanceof TypeElement) {
        TypeElement typeElement = (TypeElement) element;
        final ScopeInfo scope = findScope(typeElement);
        if (!factory) {
          // will be found via custom scope so effectively ignore additional @Singleton
          if (scope == null) {
            defaultScope.read(typeElement, false);
          }
        } else {
          if (scope != null) {
            // context.logWarn("Adding factory to custom scope "+element+" scope: "+scope);
            scope.read(typeElement, true);
          } else {
            defaultScope.read(typeElement, true);
          }
        }
      }
    }
  }

  /**
   * Find the scope if the Factory has a scope annotation.
   */
  private ScopeInfo findScope(Element element) {
    for (AnnotationMirror annotationMirror : element.getAnnotationMirrors()) {
      final ScopeInfo scopeInfo = allScopes.get(annotationMirror.getAnnotationType().toString());
      if (scopeInfo != null) {
        return scopeInfo;
      }
    }
    return null;
  }

  /**
   * Read the existing meta data from InjectModule (if found) and the factory bean (if exists).
   */
  private void readModule(RoundEnvironment roundEnv) {
    if (readModuleInfo) {
      // only read the module meta data once
      return;
    }
    readModuleInfo = true;
    String factory = context.loadMetaInfServices();
    if (factory != null) {
      TypeElement moduleType = elementUtils.getTypeElement(factory);
      if (moduleType != null) {
        defaultScope.readModuleMetaData(moduleType);
      }
    }
    allScopes.readModules(context.loadMetaInfCustom());
    readInjectModule(roundEnv);
  }

  /**
   * Read InjectModule for things like package-info etc (not for custom scopes)
   */
  private void readInjectModule(RoundEnvironment roundEnv) {
    // read other that are annotated with InjectModule
    for (Element element : roundEnv.getElementsAnnotatedWith(context.typeInjectModule())) {
      if (!context.hasAnnotation(element, Constants.SCOPE)) {
        // it it not a custom scope annotation
        AnnotationMirror annotation = context.annotation(element, Constants.INJECTMODULE);
        if (annotation != null) {
          String name = context.readAttribute(annotation, "name");
          defaultScope.details(name, element);
        }
      }
    }
  }

}
